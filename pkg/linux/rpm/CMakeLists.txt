set(CPACK_GENERATOR "RPM")
set(CPACK_PACKAGE_NAME "nemu")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "nEMU - ncurses interface for QEMU")
set(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/DESCRIPTION")
set(CPACK_PACKAGING_INSTALL_PREFIX /usr)
set(CPACK_PACKAGE_VERSION ${GIT_TAG_VERSION})
set(CPACK_PACKAGE_FILE_NAME
    "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}.${CMAKE_SYSTEM_PROCESSOR}")

if(CPACK_RPM_PACKAGE_SOURCES)
  set(CPACK_RPM_SOURCE_PKG_BUILD_PARAMS "")
  string(APPEND CPACK_RPM_SOURCE_PKG_BUILD_PARAMS
         " -DCMAKE_INSTALL_PREFIX=${CPACK_PACKAGING_INSTALL_PREFIX}")
  string(APPEND CPACK_RPM_SOURCE_PKG_BUILD_PARAMS
         " -DGIT_TAG_VERSION=${GIT_TAG_VERSION}")
  string(APPEND CPACK_RPM_SOURCE_PKG_BUILD_PARAMS
         " -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}")
  string(APPEND CPACK_RPM_SOURCE_PKG_BUILD_PARAMS
         " -DNM_CUSTOM_SYS_INCLUDE=${NM_CUSTOM_SYS_INCLUDE}")
  string(APPEND CPACK_RPM_SOURCE_PKG_BUILD_PARAMS
         " -DNM_WITH_OVF_SUPPORT=${NM_WITH_OVF_SUPPORT}")
  string(APPEND CPACK_RPM_SOURCE_PKG_BUILD_PARAMS
         " -DNM_SAVEVM_SNAPSHOTS=${NM_SAVEVM_SNAPSHOTS}")
  string(APPEND CPACK_RPM_SOURCE_PKG_BUILD_PARAMS
         " -DNM_WITH_VNC_CLIENT=${NM_WITH_VNC_CLIENT}")
  string(APPEND CPACK_RPM_SOURCE_PKG_BUILD_PARAMS
         " -DNM_WITH_SPICE=${NM_WITH_SPICE}")
  string(APPEND CPACK_RPM_SOURCE_PKG_BUILD_PARAMS
         " -DNM_WITH_NETWORK_MAP=${NM_WITH_NETWORK_MAP}")
  string(APPEND CPACK_RPM_SOURCE_PKG_BUILD_PARAMS
         " -DNM_WITH_DBUS=${NM_WITH_DBUS}")
  string(APPEND CPACK_RPM_SOURCE_PKG_BUILD_PARAMS
         " -DNM_WITH_QEMU=${NM_WITH_QEMU}")
  string(APPEND CPACK_RPM_SOURCE_PKG_BUILD_PARAMS
         " -DNM_QEMU_TARGET_LIST=${NM_QEMU_TARGET_LIST}")
elseif(NM_WITH_QEMU)
  set(CPACK_RPM_PACKAGE_REQUIRES "bzip2")
  string(APPEND CPACK_RPM_PACKAGE_REQUIRES ", libseccomp")
  string(APPEND CPACK_RPM_PACKAGE_REQUIRES ", libjpeg")
  string(APPEND CPACK_RPM_PACKAGE_REQUIRES ", libpng")
  string(APPEND CPACK_RPM_PACKAGE_REQUIRES ", libcap-ng")
  string(APPEND CPACK_RPM_PACKAGE_REQUIRES ", libcurl")
  string(APPEND CPACK_RPM_PACKAGE_REQUIRES ", glib2")
  string(APPEND CPACK_RPM_PACKAGE_REQUIRES ", pixman")
  string(APPEND CPACK_RPM_PACKAGE_REQUIRES ", libaio")
  string(APPEND CPACK_RPM_PACKAGE_REQUIRES ", spice-server")
  string(APPEND CPACK_RPM_PACKAGE_REQUIRES ", usbredir")
  string(APPEND CPACK_RPM_PACKAGE_REQUIRES ", libcap")
  string(APPEND CPACK_RPM_PACKAGE_REQUIRES ", libattr")
endif()

set(CPACK_RPM_PACKAGE_LICENSE "BSD-2-clause")
set(CPACK_RPM_PACKAGE_GROUP "Applications/Emulators")
set(CPACK_RPM_PACKAGE_URL "https://github.com/nemuTUI/nemu")
set(CPACK_RPM_PACKAGE_VENDOR "Boris Stepanenko <boris.stepanenko@gmail.com>")
set(CPACK_RPM_PACKAGE_AUTOREQ 1)
set(CPACK_RPM_POST_INSTALL_SCRIPT_FILE
    "${CMAKE_CURRENT_SOURCE_DIR}/postinstall.sh")
set(CPACK_RPM_POST_UNINSTALL_SCRIPT_FILE
    "${CMAKE_CURRENT_SOURCE_DIR}/postuninstall.sh")

list(APPEND CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION "/usr/share/locale")
list(APPEND CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION
            "/usr/share/locale/ru")
list(APPEND CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION
            "/usr/share/locale/ru/LC_MESSAGES")
list(APPEND CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION
            "/usr/share/bash-completion")
list(APPEND CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION
            "/usr/share/bash-completion/completions")
list(APPEND CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION
            "/usr/share/bash-completion/completions/nemu")

include(CPack)
